import streamlit as st
import pandas as pd
import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

st.set_page_config(page_title="SWARA Anketi", layout="centered")

st.title("ğŸ“‹ SWARA Temelli Kriter Ã–nceliklendirme Anketi")

# --- Kriter Listesi ---
kriterler = [
    "Temizlik",
    "Ä°yi Ä°letiÅŸim ve Bilgilendirme",
    "Uygun FiyatlandÄ±rma",
    "Randevu KolaylÄ±ÄŸÄ±",
    "Sorunun Ã‡Ã¶zÃ¼me UlaÅŸtÄ±rÄ±lmasÄ±",
    "MÃ¼ÅŸteriye YÃ¶nelik Ã–zenli ve Ä°lgili Hizmet",
    "Ä°kame AraÃ§ Temini",
    "HÄ±zlÄ± Servis SÃ¼resi",
    "Uzman Personel",
    "Hizmet Kalitesi ve Teknik Ä°ÅŸÃ§ilik",
    "Yedek ParÃ§alarÄ±n HÄ±zlÄ± Temini",
    "GÃ¼venlik",
    "Temiz ve DÃ¼zenli Servis AlanÄ±",
    "Garanti ve Servis SonrasÄ± Destek"
]

st.header("1. Kriterleri Ã–ncelik SÄ±rasÄ±na GÃ¶re SeÃ§iniz")
st.markdown("14 kriteri sÄ±rayla seÃ§iniz. Her seÃ§im yapÄ±ldÄ±ÄŸÄ±nda, kriter alt listeye eklenir. TÃ¼m kriterler tamamlandÄ±ÄŸÄ±nda ikinci aÅŸamaya geÃ§ilir.")

if "secilenler" not in st.session_state:
    st.session_state.secilenler = []

secilmemisler = [k for k in kriterler if k not in st.session_state.secilenler]

st.subheader("SeÃ§ilebilir Kriterler:")
cols = st.columns(2)
for i, k in enumerate(secilmemisler):
    with cols[i % 2]:
        if st.button(k, key=f"buton_{k}"):
            st.session_state.secilenler.append(k)
            st.experimental_rerun()

st.subheader("SeÃ§ilen SÄ±ralama:")
st.write(st.session_state.secilenler)

if len(st.session_state.secilenler) < 14:
    st.warning(f"SÄ±ralama tamamlanmadÄ±. LÃ¼tfen {14 - len(st.session_state.secilenler)} kriter daha seÃ§iniz.")
    st.stop()

ranked = st.session_state.secilenler

st.success("TÃ¼m kriterler sÄ±ralandÄ±!")
st.dataframe(pd.DataFrame({"SÄ±ra": list(range(1, 15)), "Kriter": ranked}))

# --- KarÅŸÄ±laÅŸtÄ±rmalar ---
st.header("2. KarÅŸÄ±laÅŸtÄ±rmalÄ± Ã–nem DeÄŸerlendirmesi")
st.markdown("Her bir Ã¼st sÄ±radaki kriterin alt sÄ±radakine gÃ¶re ne kadar daha Ã¶nemli olduÄŸunu seÃ§iniz.")

scale_labels = {
    1: "EÅŸit Ã–nemde",
    2: "Biraz Daha Ã–nemli",
    3: "Ã–nemli",
    4: "Ã‡ok Daha Ã–nemli",
    5: "AÅŸÄ±rÄ± Derecede Ã–nemli"
}

comparisons = []
for i in range(13):
    label = f"{ranked[i]} â†’ {ranked[i+1]}"
    value = st.slider(label, 1, 5, 3, format="%d")
    comparisons.append({"Ãœst Kriter": ranked[i], "Alt Kriter": ranked[i+1], "Ã–nem Derecesi": value, "AÃ§Ä±klama": scale_labels[value]})

comp_df = pd.DataFrame(comparisons)
st.dataframe(comp_df)

# --- Google Sheets'e veri gÃ¶nder ---
if st.button("GÃ¶nder ve Kaydet"):
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
        client = gspread.authorize(creds)

        sheet = client.open("SWARA Anket SonuÃ§larÄ±").sheet1
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        for row in comparisons:
            sheet.append_row([timestamp, row['Ãœst Kriter'], row['Alt Kriter'], row['Ã–nem Derecesi'], row['AÃ§Ä±klama']])

        st.success("Veriler Google Sheets'e baÅŸarÄ±yla gÃ¶nderildi. TeÅŸekkÃ¼r ederiz!")
    except Exception as e:
        st.error(f"Veri gÃ¶nderilirken bir hata oluÅŸtu: {e}")

st.info("SonuÃ§lar anket sahibine otomatik olarak iletilmektedir. SWARA hesaplama modÃ¼lÃ¼ bir sonraki aÅŸamada entegre edilecektir.")

